package br.ce.wcaquino.servicos;

import static br.ce.wcaquino.matchers.MatchersProprios.caiNumaSegunda;
import static br.cewcaquino.builders.FilmeBuilder.umFilme;
import static br.cewcaquino.builders.UsuarioBuilder.umUsuario;
import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;

import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import org.junit.Assert;
import org.junit.Before;
import org.junit.FixMethodOrder;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ErrorCollector;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.junit.runners.MethodSorters;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import org.powermock.reflect.Whitebox;

import br.ce.wcaquino.daos.LocacaoDAO;
import br.ce.wcaquino.entidades.Filme;
import br.ce.wcaquino.entidades.Locacao;
import br.ce.wcaquino.entidades.Usuario;
import br.ce.wcaquino.utils.DataUtils;
import br.cewcaquino.builders.FilmeBuilder;
import br.cewcaquino.builders.UsuarioBuilder;
@RunWith(PowerMockRunner.class)
@PrepareForTest({LocacaoService.class})
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class LocacaoServiceTest_PowerMock {
	@InjectMocks
	private LocacaoService service;
	
	@Mock
	private SPCService spc;
	@Mock
	private LocacaoDAO dao;
	@Mock
	private EmailService email;
	
	
	@Rule
	public ErrorCollector error = new ErrorCollector();
	
	@Rule
	public ExpectedException exception = ExpectedException.none(); // para terceiro teste
	
	@Before
	public void setup() {
		MockitoAnnotations.initMocks(this);
		service = PowerMockito.spy(service);
//		service = new LocacaoService();
//		dao = Mockito.mock(LocacaoDAO.class);
//		service.setLocacaoDAO(dao);
//		spc = Mockito.mock(SPCService.class);
//		service.setSPCService(spc);
//		email = Mockito.mock(EmailService.class);
//		service.setEmailService(email);
	}
	
	@Test
	public void t1_deveAlugarFilme() throws Exception {
		//Assume.assumeFalse(DataUtils.verificarDiaSemana(new Date(), Calendar.SATURDAY));
		
		
		
		//cenario
		Usuario usuario = UsuarioBuilder.umUsuario().agora();
		List<Filme> filmeList = Arrays.asList(FilmeBuilder.umFilme().modificaValorLocacao(5d).agora());
		
		PowerMockito.whenNew(Date.class).withNoArguments().thenReturn(DataUtils.obterData(22, 02, 2019));

		//Ação
		//Locacao locacao = LocacaoBuilder.umLocacao().agora();

		Locacao locacao = service.alugarFilme(usuario, filmeList);
		

		//Verificação
		error.checkThat(locacao.getValor(), is(equalTo(5.0)));
		//error.checkThat(isMesmaData(locacao.getDataLocacao(), new Date()), is(true));
		//error.checkThat(locacao.getDataLocacao(), ehHoje());
		//error.checkThat(isMesmaData(locacao.getDataRetorno(), obterDataComDiferencaDias(1)), is(true));
		//error.checkThat(locacao.getDataRetorno(), ehHojeComDiferencaDias(1));
		error.checkThat(DataUtils.isMesmaData(locacao.getDataLocacao(), DataUtils.obterData(22, 02, 2019)), is(true));

		error.checkThat(DataUtils.isMesmaData(locacao.getDataRetorno(), DataUtils.obterData(23, 02, 2019)), is(true));
		
	}
	
	
	@Test
	public void t9_DeveDevolverNaSegundaAoAlugarNoSabado() throws Exception {
		//Assume.assumeTrue(DataUtils.verificarDiaSemana(new Date(), Calendar.SATURDAY));
		
		//cenario
		Usuario usuario = UsuarioBuilder.umUsuario().agora();
		List<Filme> filmeList = Arrays.asList(umFilme().agora());
		//PowerMockito.whenNew(Date.class).withNoArguments().thenReturn(DataUtils.obterData(23, 02, 2019));
		Calendar calendar = Calendar.getInstance();
		calendar.set(Calendar.DAY_OF_MONTH, 23);
		calendar.set(Calendar.MONTH, Calendar.FEBRUARY);
		calendar.set(Calendar.YEAR, 2019);
		PowerMockito.mockStatic(Calendar.class);
		PowerMockito.when(Calendar.getInstance()).thenReturn(calendar);
		
		//acao
		Locacao resultado = service.alugarFilme(usuario, filmeList);
		
		//verificação

		//assertThat(resultado.getDataRetorno(), new DiaSemanaMatcher(Calendar.MONDAY));
		//assertThat(resultado.getDataRetorno(), caiEm(Calendar.SUNDAY));
		assertThat(resultado.getDataRetorno(), caiNumaSegunda());
		PowerMockito.verifyStatic(Mockito.times(2));
		Calendar.getInstance();
		
	}
	
	
	@Test
	public void deveAlugarFilme_SemCalcularValor() throws Exception {
		//Cenario
		Usuario usuario = umUsuario().agora();
		List<Filme> listFilme = Arrays.asList(umFilme().agora());
		
		PowerMockito.doReturn(1.0).when(service, "calcularValorLocacao", listFilme);
		
		//acao
		Locacao locacao =  service.alugarFilme(usuario, listFilme);
		
		
		//varificacao
		Assert.assertThat(locacao.getValor(), is(1.0));
		PowerMockito.verifyPrivate(service).invoke("calcularValorLocacao", listFilme);
		
	}
	
	@Test
	public void deveCalcularValorLocacao() throws Exception {
		//cenario
		List<Filme> listFilme = Arrays.asList(umFilme().agora());

		//acao
		Double valor = (Double)Whitebox.invokeMethod(service, "calcularValorLocacao", listFilme);
		
		//verificacao
		Assert.assertThat(valor, is(4.0));
	}

}
